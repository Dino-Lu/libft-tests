<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="db/d79/libft__docs_8h" kind="file" language="C++">
    <compoundname>libft_docs.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="1">
        <label>libft_docs.h</label>
        <link refid="db/d79/libft__docs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ac283963beaa3b8c7d09b78851cda297e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_isalpha</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_isalpha</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is an alphabetic letter (A-Z or a-z). </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for validating input or parsing text where only letters are allowed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if c is a letter, 0 otherwise.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(ft_isalpha(&apos;A&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/<sp/>}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Consider using ASCII values for efficiency</para>
</listitem><listitem><para>Handle both uppercase and lowercase letters</para>
</listitem><listitem><para>Return type should be int for compatibility with standard library</para>
</listitem><listitem><para>No need to handle NULL as input is a single character </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="26" column="5" declfile="libft_docs.h" declline="26" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1aefd5a0ec59a0f0de0b5289a9cd9b2d41" compoundref="d9/d79/test__libft_8c" startline="93" endline="101">test_isalpha</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a2cf15b8a1a277d1e2ce3654101a2003d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_isdigit</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_isdigit</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is a digit (0-9). </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for parsing numbers or validating numeric input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if c is a digit, 0 otherwise.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(ft_isdigit(&apos;5&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/<sp/>}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Use ASCII value range 48-57 (&apos;0&apos;-&apos;9&apos;)</para>
</listitem><listitem><para>Consider performance for high-frequency calls</para>
</listitem><listitem><para>Return type should be int for compatibility</para>
</listitem><listitem><para>No need to handle NULL as input is a single character </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="46" column="5" declfile="libft_docs.h" declline="46" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a9c0d208f96bdf47a5cb57c729a8a7f09" compoundref="d9/d79/test__libft_8c" startline="103" endline="111">test_isdigit</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a9c2c3821ea43ebdf97de07b123503f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_isalnum</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_isalnum</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is alphanumeric (A-Z, a-z, 0-9). </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for validating identifiers or user input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if c is alphanumeric, 0 otherwise.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(ft_isalnum(&apos;a&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/<sp/>}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Can reuse ft_isalpha and ft_isdigit</para>
</listitem><listitem><para>Consider performance optimization</para>
</listitem><listitem><para>Handle both uppercase and lowercase letters</para>
</listitem><listitem><para>Return type should be int for compatibility </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="66" column="5" declfile="libft_docs.h" declline="66" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a3ffdb51d3bf93f9197e5fe888f7b5a7d" compoundref="d9/d79/test__libft_8c" startline="113" endline="121">test_isalnum</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1abf60ddbec6479540e81f3648cf71f1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_isascii</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_isascii</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is an ASCII character (0-127). </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for ensuring compatibility with standard C functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if c is ASCII, 0 otherwise.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(ft_isascii(65))<sp/>{<sp/>/*<sp/>true<sp/>*/<sp/>}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Check if value is between 0 and 127</para>
</listitem><listitem><para>Handle negative values correctly</para>
</listitem><listitem><para>Consider performance for high-frequency calls</para>
</listitem><listitem><para>Return type should be int for compatibility </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="86" column="5" declfile="libft_docs.h" declline="86" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a5ebb97434628b20cf0bb04c3988d40ea" compoundref="d9/d79/test__libft_8c" startline="123" endline="128">test_isascii</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1abcdba69692f21146aeea5b3d59b7d0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_isprint</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_isprint</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is printable (including space). </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for filtering or displaying only printable characters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if c is printable, 0 otherwise.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">if<sp/>(ft_isprint(&apos;<sp/>&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/<sp/>}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Check if value is between 32 and 126</para>
</listitem><listitem><para>Include space character (32)</para>
</listitem><listitem><para>Handle negative values correctly</para>
</listitem><listitem><para>Return type should be int for compatibility </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="106" column="5" declfile="libft_docs.h" declline="106" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1af3d3dc6671a75074dc7b63cbca4f75e0" compoundref="d9/d79/test__libft_8c" startline="130" endline="136">test_isprint</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1abbb8c6c4ed85d892e7f1509f65f5768a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_strlen</definition>
        <argsstring>(const char *s)</argsstring>
        <name>ft_strlen</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Calculates the length of a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for determining the size of a string for memory allocation, string manipulation, or validation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string whose length is to be calculated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of characters in the string (excluding the null terminator).</para>
</simplesect>
<simplesect kind="note"><para>Passing NULL is undefined behavior.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">size_t<sp/>len<sp/>=<sp/>ft_strlen(&quot;Hello&quot;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>len<sp/>==<sp/>5</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input (undefined behavior)</para>
</listitem><listitem><para>Return type should be size_t for large strings</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Don&apos;t count the null terminator</para>
</listitem><listitem><para>Be careful with pointer arithmetic </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="131" column="8" declfile="libft_docs.h" declline="131" declcolumn="8"/>
        <referencedby refid="d9/d79/test__libft_8c_1ab6533a2d0860e9f95bf8a8bc5ac50cd6" compoundref="d9/d79/test__libft_8c" startline="139" endline="145">test_strlen</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1afad2ec371b4188602da9a94db687cb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_atoi</definition>
        <argsstring>(const char *str)</argsstring>
        <name>ft_atoi</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Converts a string to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for parsing numbers from user input or files.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The integer value represented by the string.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>n<sp/>=<sp/>ft_atoi(&quot;42&quot;);<sp/>//<sp/>n<sp/>==<sp/>42</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle whitespace at the beginning</para>
</listitem><listitem><para>Handle optional sign (+ or -)</para>
</listitem><listitem><para>Handle overflow cases</para>
</listitem><listitem><para>Handle invalid input</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Handle leading zeros </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="154" column="5" declfile="libft_docs.h" declline="154" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a7046e5fb801359527dfbcb5b09b3b92a" compoundref="d9/d79/test__libft_8c" startline="282" endline="291">test_atoi</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1aa6d0c2d180f32ee585485e1a1ce3d55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strchr</definition>
        <argsstring>(const char *s, int c)</argsstring>
        <name>ft_strchr</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Finds the first occurrence of a character in a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for searching or parsing strings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first occurrence or NULL if not found.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*p<sp/>=<sp/>ft_strchr(&quot;Hello&quot;,<sp/>&apos;e&apos;);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;ello&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Consider the null terminator as part of the search</para>
</listitem><listitem><para>Return type should be char* for string operations</para>
</listitem><listitem><para>Be careful with pointer arithmetic </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="176" column="6" declfile="libft_docs.h" declline="176" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a11c50a6fe71c03df8367ffdafe96eab8" compoundref="d9/d79/test__libft_8c" startline="234" endline="240">test_strchr</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a49c260cf80f9997975d6f3ec74ead582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strrchr</definition>
        <argsstring>(const char *s, int c)</argsstring>
        <name>ft_strrchr</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Finds the last occurrence of a character in a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for searching or parsing strings from the end.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the last occurrence or NULL if not found.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*p<sp/>=<sp/>ft_strrchr(&quot;Hello&quot;,<sp/>&apos;l&apos;);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;lo&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Consider the null terminator as part of the search</para>
</listitem><listitem><para>Return type should be char* for string operations</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Consider performance for long strings </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="199" column="6" declfile="libft_docs.h" declline="199" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a42e67aa7487605e77f3ff953e574dcd0" compoundref="d9/d79/test__libft_8c" startline="242" endline="248">test_strrchr</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a9d2fe792187aa4ed08e5864fb2c4d6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_strncmp</definition>
        <argsstring>(const char *s1, const char *s2, size_t n)</argsstring>
        <name>ft_strncmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Compares two strings up to n characters. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for sorting or checking string equality with a limit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>First string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if equal, &lt;0 if s1 &lt; s2, &gt;0 if s1 &gt; s2.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>cmp<sp/>=<sp/>ft_strncmp(&quot;abc&quot;,<sp/>&quot;abd&quot;,<sp/>2);<sp/>//<sp/>cmp<sp/>==<sp/>0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle n = 0 case</para>
</listitem><listitem><para>Handle strings shorter than n</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle unsigned char comparison </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="223" column="5" declfile="libft_docs.h" declline="223" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a4c0e97dfc186f1e846a311f81c0c0184" compoundref="d9/d79/test__libft_8c" startline="250" endline="256">test_strncmp</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a19d0a16cec67fe4c1af22f1571f4f8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ft_memset</definition>
        <argsstring>(void *b, int c, size_t len)</argsstring>
        <name>ft_memset</name>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Sets a block of memory to a specific value. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for initializing arrays or buffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set (converted to unsigned char). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the memory area b.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>buf[10];</highlight></codeline>
<codeline><highlight class="normal">ft_memset(buf,<sp/>0,<sp/>10);<sp/>//<sp/>All<sp/>bytes<sp/>set<sp/>to<sp/>0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle len = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="248" column="6" declfile="libft_docs.h" declline="248" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1ae1b87c5afaaea495ddaf760e45cfcc31" compoundref="d9/d79/test__libft_8c" startline="147" endline="157">test_memset</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a5937ab0d08e31d0e3e4a16ec71e293a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_bzero</definition>
        <argsstring>(void *s, size_t n)</argsstring>
        <name>ft_bzero</name>
        <param>
          <type>void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Sets a block of memory to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for clearing buffers or structures.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to set to zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">char<sp/>buf[10];</highlight></codeline>
<codeline><highlight class="normal">ft_bzero(buf,<sp/>10);<sp/>//<sp/>All<sp/>bytes<sp/>set<sp/>to<sp/>0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle n = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="271" column="6" declfile="libft_docs.h" declline="271" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1abfe29719124f5a41e57bad7a7c005282" compoundref="d9/d79/test__libft_8c" startline="159" endline="169">test_bzero</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a5f5c5d19b1f0355d9768c75d30ed5559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ft_memcpy</definition>
        <argsstring>(void *dst, const void *src, size_t n)</argsstring>
        <name>ft_memcpy</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copies memory from source to destination. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for duplicating data or moving blocks of memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to dst.</para>
</simplesect>
<simplesect kind="note"><para>Undefined behavior if src or dst is NULL and n &gt; 0.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>src[]<sp/>=<sp/>&quot;abc&quot;;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>dst[4];</highlight></codeline>
<codeline><highlight class="normal">ft_memcpy(dst,<sp/>src,<sp/>4);<sp/>//<sp/>Copies<sp/>&quot;abc\0&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle n = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed</para>
</listitem><listitem><para>Handle overlapping memory regions (use memmove instead) </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="300" column="6" declfile="libft_docs.h" declline="300" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1afd336e56c8e975e54a1e5811dc95309f" compoundref="d9/d79/test__libft_8c" startline="171" endline="182">test_memcpy</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1acdc865fa140c03c01a39d74b1f5c2416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ft_memmove</definition>
        <argsstring>(void *dst, const void *src, size_t len)</argsstring>
        <name>ft_memmove</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Moves memory from source to destination, safe for overlapping regions. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for shifting data within the same buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to move. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to dst.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>buf[]<sp/>=<sp/>&quot;abcdef&quot;;</highlight></codeline>
<codeline><highlight class="normal">ft_memmove(buf<sp/>+<sp/>2,<sp/>buf,<sp/>4);<sp/>//<sp/>buf<sp/>==<sp/>&quot;ababcd&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle len = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed</para>
</listitem><listitem><para>Handle overlapping memory regions correctly</para>
</listitem><listitem><para>Consider direction of copy for overlapping regions </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="327" column="6" declfile="libft_docs.h" declline="327" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1adbdeaedccd2367f1d025fcc3b670dc10" compoundref="d9/d79/test__libft_8c" startline="184" endline="194">test_memmove</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a12f759eb9793cf306fede66d0b7de0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_strlcpy</definition>
        <argsstring>(char *dst, const char *src, size_t dstsize)</argsstring>
        <name>ft_strlcpy</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dstsize</declname>
        </param>
        <briefdescription>
<para>Copies a string with size limitation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for safe string copying to avoid buffer overflows.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the destination buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total length of the string it tried to create (length of src).</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>buf[5];</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>n<sp/>=<sp/>ft_strlcpy(buf,<sp/>&quot;Hello&quot;,<sp/>5);<sp/>//<sp/>buf<sp/>==<sp/>&quot;Hell&quot;,<sp/>n<sp/>==<sp/>5</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle dstsize = 0 case</para>
</listitem><listitem><para>Always null-terminate the destination</para>
</listitem><listitem><para>Return the length of src</para>
</listitem><listitem><para>Don&apos;t write beyond dstsize - 1</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="353" column="8" declfile="libft_docs.h" declline="353" declcolumn="8"/>
        <referencedby refid="d9/d79/test__libft_8c_1a2faeccbd4694bfcb07b91f4f3d058fc5" compoundref="d9/d79/test__libft_8c" startline="196" endline="205">test_strlcpy</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a7531453313e0cbfde6fe51662c9c3208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ft_strlcat</definition>
        <argsstring>(char *dst, const char *src, size_t dstsize)</argsstring>
        <name>ft_strlcat</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dstsize</declname>
        </param>
        <briefdescription>
<para>Concatenates strings with size limitation. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for safe string concatenation to avoid buffer overflows.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer (must be null-terminated). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Total size of the destination buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total length of the string it tried to create (initial length of dst + length of src).</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>buf[10]<sp/>=<sp/>&quot;Hi&quot;;</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>n<sp/>=<sp/>ft_strlcat(buf,<sp/>&quot;<sp/>there&quot;,<sp/>10);<sp/>//<sp/>buf<sp/>==<sp/>&quot;Hi<sp/>there&quot;,<sp/>n<sp/>==<sp/>8</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle dstsize = 0 case</para>
</listitem><listitem><para>Always null-terminate the destination</para>
</listitem><listitem><para>Return the length of src + initial length of dst</para>
</listitem><listitem><para>Don&apos;t write beyond dstsize - 1</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle case where dst is not null-terminated </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="380" column="8" declfile="libft_docs.h" declline="380" declcolumn="8"/>
        <referencedby refid="d9/d79/test__libft_8c_1ae56b2032f4a17d9dbb566ee3adfe7793" compoundref="d9/d79/test__libft_8c" startline="207" endline="216">test_strlcat</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ae00229613cc0bf361e86dca72ad92591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strnstr</definition>
        <argsstring>(const char *haystack, const char *needle, size_t len)</argsstring>
        <name>ft_strnstr</name>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Locates a substring in a string, up to a maximum length. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for searching for substrings in a buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>haystack</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>needle</parametername>
</parameternamelist>
<parameterdescription>
<para>The substring to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of characters to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first occurrence or NULL if not found.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*p<sp/>=<sp/>ft_strnstr(&quot;Hello<sp/>world&quot;,<sp/>&quot;world&quot;,<sp/>11);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;world&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle empty needle string</para>
</listitem><listitem><para>Handle len = 0 case</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle case where needle is longer than haystack</para>
</listitem><listitem><para>Consider using efficient string matching algorithms </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="405" column="6" declfile="libft_docs.h" declline="405" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a0527d791bdbd61958cd0e6497f9cf01f" compoundref="d9/d79/test__libft_8c" startline="274" endline="280">test_strnstr</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1abf633e8e48a8afbe61947f61de5ac695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ft_memchr</definition>
        <argsstring>(const void *s, int c, size_t n)</argsstring>
        <name>ft_memchr</name>
        <param>
          <type>const void *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Searches for a byte in a block of memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for binary data processing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory area to search. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to find. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to search. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the first occurrence or NULL if not found.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>buf[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline><highlight class="normal">void<sp/>*p<sp/>=<sp/>ft_memchr(buf,<sp/>3,<sp/>4);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>buf[2]</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle n = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed</para>
</listitem><listitem><para>Handle unsigned char comparison </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="431" column="6" declfile="libft_docs.h" declline="431" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a7d942f0bb7c4ef42734ee0ded29a3e99" compoundref="d9/d79/test__libft_8c" startline="258" endline="264">test_memchr</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a08f665a1828c402f2ffe2e2187f135fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_memcmp</definition>
        <argsstring>(const void *s1, const void *s2, size_t n)</argsstring>
        <name>ft_memcmp</name>
        <param>
          <type>const void *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Compares two blocks of memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for checking equality of binary data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>First memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second memory area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if equal, &lt;0 if s1 &lt; s2, &gt;0 if s1 &gt; s2.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>cmp<sp/>=<sp/>ft_memcmp(&quot;abc&quot;,<sp/>&quot;abd&quot;,<sp/>2);<sp/>//<sp/>cmp<sp/>==<sp/>0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle n = 0 case</para>
</listitem><listitem><para>Consider performance for large blocks</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle alignment issues</para>
</listitem><listitem><para>Consider using word-sized operations for speed</para>
</listitem><listitem><para>Handle unsigned char comparison </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="456" column="5" declfile="libft_docs.h" declline="456" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a45684548fb2dd1bf7cbbb4188541e82e" compoundref="d9/d79/test__libft_8c" startline="266" endline="272">test_memcmp</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ae0a6807f9f78ed4bf4f958323582d22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ft_calloc</definition>
        <argsstring>(size_t count, size_t size)</argsstring>
        <name>ft_calloc</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates memory for an array and initializes it to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for creating arrays or buffers with all elements set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the allocated memory, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>*arr<sp/>=<sp/>(int<sp/>*)ft_calloc(10,<sp/>sizeof(int));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>arr[0..9]<sp/>==<sp/>0</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle count = 0 or size = 0</para>
</listitem><listitem><para>Handle overflow in count * size</para>
</listitem><listitem><para>Initialize all bytes to zero</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider alignment requirements</para>
</listitem><listitem><para>Handle large allocations</para>
</listitem><listitem><para>Check for memory leaks in error cases </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="481" column="6" declfile="libft_docs.h" declline="481" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a764c620aaa65aaef8a3d74d58e93c89a" compoundref="d9/d79/test__libft_8c" startline="293" endline="313">test_calloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a2ac2079a4250507c9af75d696f2ae476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strdup</definition>
        <argsstring>(const char *s1)</argsstring>
        <name>ft_strdup</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <briefdescription>
<para>Duplicates a string by allocating new memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for making a copy of a string that can be modified or freed independently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to duplicate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new string, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*copy<sp/>=<sp/>ft_strdup(&quot;Hello&quot;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>copy<sp/>==<sp/>&quot;Hello&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Allocate enough memory for string + null terminator</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle empty strings </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="505" column="6" declfile="libft_docs.h" declline="505" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a7e0f68777457510617ba4332f9a5b29a" compoundref="d9/d79/test__libft_8c" startline="315" endline="330">test_strdup</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a78c402cbf3d55b1374693c3b7d34f71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_substr</definition>
        <argsstring>(char const *s, unsigned int start, size_t len)</argsstring>
        <name>ft_substr</name>
        <param>
          <type>char const *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Extracts a substring from a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for parsing or manipulating parts of a string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length of the substring. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new substring, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*sub<sp/>=<sp/>ft_substr(&quot;Hello&quot;,<sp/>1,<sp/>3);<sp/>//<sp/>sub<sp/>==<sp/>&quot;ell&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle start beyond string length</para>
</listitem><listitem><para>Handle len beyond string length</para>
</listitem><listitem><para>Allocate only necessary memory</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle empty strings </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="532" column="6" declfile="libft_docs.h" declline="532" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a0d46b2054f033152591a9174189b4eb3" compoundref="d9/d79/test__libft_8c" startline="332" endline="350">test_substr</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a91e6e3e428bcc9f2291b700e1829b82b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strjoin</definition>
        <argsstring>(char const *s1, char const *s2)</argsstring>
        <name>ft_strjoin</name>
        <param>
          <type>char const *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Joins two strings into a new string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for concatenating strings with dynamic memory allocation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>First string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new string, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*joined<sp/>=<sp/>ft_strjoin(&quot;Hello&quot;,<sp/>&quot;<sp/>world&quot;);<sp/>//<sp/>joined<sp/>==<sp/>&quot;Hello<sp/>world&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Allocate enough memory for both strings + null terminator</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Handle string overflow </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="557" column="6" declfile="libft_docs.h" declline="557" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a07428bbcc3f756840b2ac2b6d5cced3e" compoundref="d9/d79/test__libft_8c" startline="352" endline="367">test_strjoin</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a60352c5b39fab08469b3e28131a79e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strtrim</definition>
        <argsstring>(char const *s1, char const *set)</argsstring>
        <name>ft_strtrim</name>
        <param>
          <type>char const *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Trims characters from the beginning and end of a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for removing unwanted characters (like whitespace) from input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to trim. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of characters to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the trimmed string, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*trimmed<sp/>=<sp/>ft_strtrim(&quot;<sp/><sp/>Hello<sp/><sp/>&quot;,<sp/>&quot;<sp/>&quot;);<sp/>//<sp/>trimmed<sp/>==<sp/>&quot;Hello&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Handle empty set</para>
</listitem><listitem><para>Allocate only necessary memory</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle strings with only trim characters </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="583" column="6" declfile="libft_docs.h" declline="583" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1aba6028400ecc1b9717cd9e4c42c8815c" compoundref="d9/d79/test__libft_8c" startline="369" endline="384">test_strtrim</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1aa65c9de65051c8c589286cf133c4a1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** ft_split</definition>
        <argsstring>(char const *s, char c)</argsstring>
        <name>ft_split</name>
        <param>
          <type>char const *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Splits a string into an array of strings using a delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for parsing CSV, command-line arguments, or any delimited data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to split. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The delimiter character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of strings, terminated by NULL. NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>**words<sp/>=<sp/>ft_split(&quot;a,b,c&quot;,<sp/>&apos;,&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>words[0]<sp/>==<sp/>&quot;a&quot;,<sp/>words[1]<sp/>==<sp/>&quot;b&quot;,<sp/>words[2]<sp/>==<sp/>&quot;c&quot;,<sp/>words[3]<sp/>==<sp/>NULL</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Handle strings with no delimiters</para>
</listitem><listitem><para>Handle consecutive delimiters</para>
</listitem><listitem><para>Handle delimiter at start/end</para>
</listitem><listitem><para>Allocate memory for array and each string</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle string overflow</para>
</listitem><listitem><para>Free all allocated memory on failure </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="613" column="6" declfile="libft_docs.h" declline="613" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a3c6cf2600fb56e147f568874cdad9a63" compoundref="d9/d79/test__libft_8c" startline="386" endline="426">test_split</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a8a6ea3765dfd826eabfc00d36e28ea38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_itoa</definition>
        <argsstring>(int n)</argsstring>
        <name>ft_itoa</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Converts an integer to a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for displaying numbers or writing them to files.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new string, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*s<sp/>=<sp/>ft_itoa(42);<sp/>//<sp/>s<sp/>==<sp/>&quot;42&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle negative numbers</para>
</listitem><listitem><para>Handle zero</para>
</listitem><listitem><para>Handle INT_MIN</para>
</listitem><listitem><para>Allocate enough memory for the string</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle string overflow </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="638" column="6" declfile="libft_docs.h" declline="638" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1abb295917a3eb14e4e20419e367522431" compoundref="d9/d79/test__libft_8c" startline="428" endline="448">test_itoa</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a668b60557bfc9d60c2d3ccda8afadf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ft_strmapi</definition>
        <argsstring>(char const *s, char(*f)(unsigned int, char))</argsstring>
        <name>ft_strmapi</name>
        <param>
          <type>char const *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char(*)(unsigned int, char)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Applies a function to each character of a string, creating a new string. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for mapping or transforming strings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The source string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply (takes index and character). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the new string, or NULL on failure.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>to_upper(unsigned<sp/>int<sp/>i,<sp/>char<sp/>c)<sp/>{<sp/>(void)i;<sp/>return<sp/>ft_toupper(c);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">char<sp/>*upper<sp/>=<sp/>ft_strmapi(&quot;abc&quot;,<sp/>to_upper);<sp/>//<sp/>upper<sp/>==<sp/>&quot;ABC&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Allocate enough memory for the string</para>
</listitem><listitem><para>Return NULL on failure</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Check for memory leaks in error cases</para>
</listitem><listitem><para>Handle function pointer NULL </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="664" column="6" declfile="libft_docs.h" declline="664" declcolumn="6"/>
        <references refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" compoundref="d5/ddd/unity_8c" startline="1577">f</references>
        <referencedby refid="d9/d79/test__libft_8c_1ad039127e6354b0c92af33c7852d7761f" compoundref="d9/d79/test__libft_8c" startline="455" endline="465">test_strmapi</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ada722cffd2c6c8169ae339afd0f9763c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_striteri</definition>
        <argsstring>(char *s, void(*f)(unsigned int, char *))</argsstring>
        <name>ft_striteri</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>void(*)(unsigned int, char *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Applies a function to each character of a string in place. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for modifying strings directly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply (takes index and pointer to character).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">void<sp/>to_upper(unsigned<sp/>int<sp/>i,<sp/>char<sp/>*c)<sp/>{<sp/>(void)i;<sp/>*c<sp/>=<sp/>ft_toupper(*c);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">char<sp/>str[]<sp/>=<sp/>&quot;abc&quot;;</highlight></codeline>
<codeline><highlight class="normal">ft_striteri(str,<sp/>to_upper);<sp/>//<sp/>str<sp/>==<sp/>&quot;ABC&quot;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL inputs</para>
</listitem><listitem><para>Handle empty strings</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Be careful with pointer arithmetic</para>
</listitem><listitem><para>Handle function pointer NULL</para>
</listitem><listitem><para>Handle string overflow </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="688" column="6" declfile="libft_docs.h" declline="688" declcolumn="6"/>
        <references refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" compoundref="d5/ddd/unity_8c" startline="1577">f</references>
        <referencedby refid="d9/d79/test__libft_8c_1a46fc6648e2524106abfc8e85b3ffd4d9" compoundref="d9/d79/test__libft_8c" startline="472" endline="476">test_striteri</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a8ee15a511946c1397bd2bdea4aed6aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_putchar_fd</definition>
        <argsstring>(char c, int fd)</argsstring>
        <name>ft_putchar_fd</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Writes a character to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for outputting characters to files or standard output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">ft_putchar_fd(&apos;A&apos;,<sp/>1);<sp/>//<sp/>Writes<sp/>&apos;A&apos;<sp/>to<sp/>stdout</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle invalid file descriptor</para>
</listitem><listitem><para>Handle write errors</para>
</listitem><listitem><para>Consider performance for multiple writes</para>
</listitem><listitem><para>Handle system call errors</para>
</listitem><listitem><para>Handle character encoding </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="709" column="6" declfile="libft_docs.h" declline="709" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a59656c038fcaeafc75f3f17293bd4353" compoundref="d9/d79/test__libft_8c" startline="478" endline="493">test_putchar_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1acefce9ac519f8f8b7d3fde33dbafe469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_putstr_fd</definition>
        <argsstring>(char *s, int fd)</argsstring>
        <name>ft_putstr_fd</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Writes a string to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for outputting strings to files or standard output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">ft_putstr_fd(&quot;Hello&quot;,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;Hello&quot;<sp/>to<sp/>stdout</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle invalid file descriptor</para>
</listitem><listitem><para>Handle write errors</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Handle system call errors</para>
</listitem><listitem><para>Handle string encoding </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="731" column="6" declfile="libft_docs.h" declline="731" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1aa83e8b318d56689656bd962ece77310e" compoundref="d9/d79/test__libft_8c" startline="495" endline="510">test_putstr_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1aeb112152acfc553d58d61a5df38afcde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_putendl_fd</definition>
        <argsstring>(char *s, int fd)</argsstring>
        <name>ft_putendl_fd</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Writes a string followed by a newline to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for outputting lines to files or standard output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">ft_putendl_fd(&quot;Hello&quot;,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;Hello\n&quot;<sp/>to<sp/>stdout</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle NULL input</para>
</listitem><listitem><para>Handle invalid file descriptor</para>
</listitem><listitem><para>Handle write errors</para>
</listitem><listitem><para>Consider performance for long strings</para>
</listitem><listitem><para>Handle system call errors</para>
</listitem><listitem><para>Handle string encoding</para>
</listitem><listitem><para>Handle newline encoding </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="754" column="6" declfile="libft_docs.h" declline="754" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a709c447b36199b558f6e1c75a10f69cf" compoundref="d9/d79/test__libft_8c" startline="512" endline="527">test_putendl_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a63cc0aec12256d125d3f85e472280972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_putnbr_fd</definition>
        <argsstring>(int n, int fd)</argsstring>
        <name>ft_putnbr_fd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Writes an integer as a string to a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for outputting numbers to files or standard output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">ft_putnbr_fd(42,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;42&quot;<sp/>to<sp/>stdout</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle negative numbers</para>
</listitem><listitem><para>Handle INT_MIN</para>
</listitem><listitem><para>Handle invalid file descriptor</para>
</listitem><listitem><para>Handle write errors</para>
</listitem><listitem><para>Consider performance</para>
</listitem><listitem><para>Handle system call errors</para>
</listitem><listitem><para>Handle number encoding </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="777" column="6" declfile="libft_docs.h" declline="777" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a705bb4e217c9c6cae26a0b532c1c9dd6" compoundref="d9/d79/test__libft_8c" startline="529" endline="544">test_putnbr_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1aef116be7b5bceafff4b59f20a4433d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_toupper</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_toupper</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Converts a character to uppercase. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for case-insensitive comparisons or formatting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The uppercase equivalent if c is lowercase, otherwise c.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>up<sp/>=<sp/>ft_toupper(&apos;a&apos;);<sp/>//<sp/>up<sp/>==<sp/>&apos;A&apos;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle non-alphabetic characters</para>
</listitem><listitem><para>Consider performance for high-frequency calls</para>
</listitem><listitem><para>Handle character encoding</para>
</listitem><listitem><para>Return type should be int for compatibility </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="797" column="5" declfile="libft_docs.h" declline="797" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1af7800dba64b8f4ab83a77f20152f6804" compoundref="d9/d79/test__libft_8c" startline="218" endline="224">test_toupper</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ab86e5297914753b6c82d7e3c3020ce17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_tolower</definition>
        <argsstring>(int c)</argsstring>
        <name>ft_tolower</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Converts a character to lowercase. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for case-insensitive comparisons or formatting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lowercase equivalent if c is uppercase, otherwise c.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>low<sp/>=<sp/>ft_tolower(&apos;A&apos;);<sp/>//<sp/>low<sp/>==<sp/>&apos;a&apos;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Implementation Considerations:<itemizedlist>
<listitem><para>Handle non-alphabetic characters</para>
</listitem><listitem><para>Consider performance for high-frequency calls</para>
</listitem><listitem><para>Handle character encoding</para>
</listitem><listitem><para>Return type should be int for compatibility </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="817" column="5" declfile="libft_docs.h" declline="817" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a31215f0af2569da6b3ee78584fd818d9" compoundref="d9/d79/test__libft_8c" startline="226" endline="232">test_tolower</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a8fe4ea6f56f5a2a75ee13d97416b60ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>t_list *</type>
        <definition>t_list * ft_lstnew</definition>
        <argsstring>(void *content)</argsstring>
        <name>ft_lstnew</name>
        <param>
          <type>void *</type>
          <declname>content</declname>
        </param>
        <briefdescription>
<para>Creates a new list element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content to be stored in the new element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>t_list* A pointer to the new element, or NULL if allocation fails.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(new_node)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>new_node</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>free(new_node-&gt;content);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>free(new_node);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Memory for both the element and its content is allocated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="836" column="8" declfile="libft_docs.h" declline="836" declcolumn="8"/>
        <referencedby refid="d9/d79/test__libft_8c_1ad6ba135c31e0d04cb5d221903bab6514" compoundref="d9/d79/test__libft_8c" startline="719" endline="759">test_lstadd_back</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aa3e34250a28da8f72a0fd1ce2d176d42" compoundref="d9/d79/test__libft_8c" startline="621" endline="661">test_lstadd_front</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aadf5b3dd0490b6167b824d3065037336" compoundref="d9/d79/test__libft_8c" startline="783" endline="817">test_lstclear</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a22b67bd0a819f48f1afcc0ea492308a3" compoundref="d9/d79/test__libft_8c" startline="761" endline="781">test_lstdelone</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aaa6fe355b7e741f8492178d77470da65" compoundref="d9/d79/test__libft_8c" startline="897" endline="932">test_lstdelone_direct</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a0da22653eab7c346edb0b7402736d630" compoundref="d9/d79/test__libft_8c" startline="819" endline="850">test_lstiter</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a76984233d16b0dd8384573bcf043b4cd" compoundref="d9/d79/test__libft_8c" startline="691" endline="717">test_lstlast</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1ae5d801767f222dd8fd8d822017a8c76d" compoundref="d9/d79/test__libft_8c" startline="852" endline="895">test_lstmap</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a5d0832d96a4d284dfff3806d3c3c32c0" compoundref="d9/d79/test__libft_8c" startline="593" endline="619">test_lstnew</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a49c808b6eb5acff5b3d484195feb1a3a" compoundref="d9/d79/test__libft_8c" startline="663" endline="689">test_lstsize</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a0195e4eb88fad15717ed90524ac15771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_lstadd_front</definition>
        <argsstring>(t_list **lst, t_list *new)</argsstring>
        <name>ft_lstadd_front</name>
        <param>
          <type>t_list **</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>t_list *</type>
          <declname>new</declname>
        </param>
        <briefdescription>
<para>Adds a new element at the beginning of the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline><highlight class="normal">ft_lstadd_front(&amp;list,<sp/>new_node);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The new element becomes the first element of the list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="852" column="6" declfile="libft_docs.h" declline="852" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1aa3e34250a28da8f72a0fd1ce2d176d42" compoundref="d9/d79/test__libft_8c" startline="621" endline="661">test_lstadd_front</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a9da614988ac99446db9df99d2c773fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ft_lstsize</definition>
        <argsstring>(t_list *lst)</argsstring>
        <name>ft_lstsize</name>
        <param>
          <type>t_list *</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
<para>Counts the number of elements in a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The number of elements in the list.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">int<sp/>size<sp/>=<sp/>ft_lstsize(list);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Returns 0 if the list is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="868" column="5" declfile="libft_docs.h" declline="868" declcolumn="5"/>
        <referencedby refid="d9/d79/test__libft_8c_1a49c808b6eb5acff5b3d484195feb1a3a" compoundref="d9/d79/test__libft_8c" startline="663" endline="689">test_lstsize</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1aed5f9b5ecc45235a7b7cf9d4b24e43dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>t_list *</type>
        <definition>t_list * ft_lstlast</definition>
        <argsstring>(t_list *lst)</argsstring>
        <name>ft_lstlast</name>
        <param>
          <type>t_list *</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
<para>Returns the last element of the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>t_list* A pointer to the last element, or NULL if the list is empty.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">t_list<sp/>*last<sp/>=<sp/>ft_lstlast(list);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Returns NULL if the list is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="884" column="8" declfile="libft_docs.h" declline="884" declcolumn="8"/>
        <referencedby refid="d9/d79/test__libft_8c_1a76984233d16b0dd8384573bcf043b4cd" compoundref="d9/d79/test__libft_8c" startline="691" endline="717">test_lstlast</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a4c10e88fffc3c9467eb16e6debd227a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_lstadd_back</definition>
        <argsstring>(t_list **lst, t_list *new)</argsstring>
        <name>ft_lstadd_back</name>
        <param>
          <type>t_list **</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>t_list *</type>
          <declname>new</declname>
        </param>
        <briefdescription>
<para>Adds a new element at the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new</parametername>
</parameternamelist>
<parameterdescription>
<para>The new element to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline><highlight class="normal">ft_lstadd_back(&amp;list,<sp/>new_node);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The new element becomes the last element of the list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="900" column="6" declfile="libft_docs.h" declline="900" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1ad6ba135c31e0d04cb5d221903bab6514" compoundref="d9/d79/test__libft_8c" startline="719" endline="759">test_lstadd_back</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1ac2b881501f9ee2f3ed5718f6d9ebee7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_lstdelone</definition>
        <argsstring>(t_list *lst, void(*del)(void *))</argsstring>
        <name>ft_lstdelone</name>
        <param>
          <type>t_list *</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>del</declname>
        </param>
        <briefdescription>
<para>Deletes a single element from the list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to delete. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>del</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to free the content of the element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">ft_lstdelone(list,<sp/>free);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The content of the element is freed using the del function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="916" column="6" declfile="libft_docs.h" declline="916" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1a22b67bd0a819f48f1afcc0ea492308a3" compoundref="d9/d79/test__libft_8c" startline="761" endline="781">test_lstdelone</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aaa6fe355b7e741f8492178d77470da65" compoundref="d9/d79/test__libft_8c" startline="897" endline="932">test_lstdelone_direct</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a6e900cfaea2857bbf490f3105e38da93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_lstclear</definition>
        <argsstring>(t_list **lst, void(*del)(void *))</argsstring>
        <name>ft_lstclear</name>
        <param>
          <type>t_list **</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>del</declname>
        </param>
        <briefdescription>
<para>Deletes and frees the entire list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the first element of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>del</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to free the content of each element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">ft_lstclear(&amp;list,<sp/>free);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The content of each element is freed using the del function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="932" column="6" declfile="libft_docs.h" declline="932" declcolumn="6"/>
        <referencedby refid="d9/d79/test__libft_8c_1ad6ba135c31e0d04cb5d221903bab6514" compoundref="d9/d79/test__libft_8c" startline="719" endline="759">test_lstadd_back</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aa3e34250a28da8f72a0fd1ce2d176d42" compoundref="d9/d79/test__libft_8c" startline="621" endline="661">test_lstadd_front</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1aadf5b3dd0490b6167b824d3065037336" compoundref="d9/d79/test__libft_8c" startline="783" endline="817">test_lstclear</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a0da22653eab7c346edb0b7402736d630" compoundref="d9/d79/test__libft_8c" startline="819" endline="850">test_lstiter</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a76984233d16b0dd8384573bcf043b4cd" compoundref="d9/d79/test__libft_8c" startline="691" endline="717">test_lstlast</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1ae5d801767f222dd8fd8d822017a8c76d" compoundref="d9/d79/test__libft_8c" startline="852" endline="895">test_lstmap</referencedby>
        <referencedby refid="d9/d79/test__libft_8c_1a49c808b6eb5acff5b3d484195feb1a3a" compoundref="d9/d79/test__libft_8c" startline="663" endline="689">test_lstsize</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a1888c62a89ec3d206f2ed4590f4a021d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ft_lstiter</definition>
        <argsstring>(t_list *lst, void(*f)(void *))</argsstring>
        <name>ft_lstiter</name>
        <param>
          <type>t_list *</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Iterates through the list and applies a function to each element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to apply to each element.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">ft_lstiter(list,<sp/>print_content);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The function f is applied to the content of each element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="948" column="6" declfile="libft_docs.h" declline="948" declcolumn="6"/>
        <references refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" compoundref="d5/ddd/unity_8c" startline="1577">f</references>
        <referencedby refid="d9/d79/test__libft_8c_1a0da22653eab7c346edb0b7402736d630" compoundref="d9/d79/test__libft_8c" startline="819" endline="850">test_lstiter</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d79/libft__docs_8h_1a8198d1837ffbba05823f5e85afebf9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>t_list *</type>
        <definition>t_list * ft_lstmap</definition>
        <argsstring>(t_list *lst, void *(*f)(void *), void(*del)(void *))</argsstring>
        <name>ft_lstmap</name>
        <param>
          <type>t_list *</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>void *(*)(void *)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>del</declname>
        </param>
        <briefdescription>
<para>Creates a new list resulting from applying a function to each element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>The beginning of the list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to apply to each element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>del</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to free the content of an element if allocation fails. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>t_list* A pointer to the new list, or NULL if allocation fails.</para>
</simplesect>
<programlisting><codeline><highlight class="normal">t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline><highlight class="normal">t_list<sp/>*new_list<sp/>=<sp/>ft_lstmap(list,<sp/>duplicate_content,<sp/>free);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The content of each element is duplicated using the function f. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libft_docs.h" line="966" column="8" declfile="libft_docs.h" declline="966" declcolumn="8"/>
        <references refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" compoundref="d5/ddd/unity_8c" startline="1577">f</references>
        <referencedby refid="d9/d79/test__libft_8c_1ae5d801767f222dd8fd8d822017a8c76d" compoundref="d9/d79/test__libft_8c" startline="852" endline="895">test_lstmap</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LIBFT_DOCS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>LIBFT_DOCS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>NULL<sp/>&amp;<sp/>malloc<sp/>&amp;<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>descriptor<sp/>&amp;<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIZE_MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>character<sp/>is<sp/>an<sp/>alphabetic<sp/>letter<sp/>(A-Z<sp/>or<sp/>a-z).</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>validating<sp/>input<sp/>or<sp/>parsing<sp/>text<sp/>where<sp/>only<sp/>letters<sp/>are<sp/>allowed.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>@return<sp/>Non-zero<sp/>if<sp/>c<sp/>is<sp/>a<sp/>letter,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>if<sp/>(ft_isalpha(&apos;A&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">@end</highlight><highlight class="normal">code</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/>*<sp/>-<sp/>Consider<sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ASCII<sp/>values<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>efficiency</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/>*<sp/>-<sp/>Handle<sp/>both<sp/>uppercase<sp/>and<sp/>lowercase<sp/>letters</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compatibility<sp/>with<sp/>standard<sp/>library</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/>*<sp/>-<sp/>No<sp/>need<sp/>to<sp/>handle<sp/>NULL<sp/>as<sp/>input<sp/>is<sp/>a<sp/>single<sp/>character</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline lineno="26" refid="db/d79/libft__docs_8h_1ac283963beaa3b8c7d09b78851cda297e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1ac283963beaa3b8c7d09b78851cda297e" kindref="member">ft_isalpha</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>character<sp/>is<sp/>a<sp/>digit<sp/>(0-9).</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>parsing<sp/>numbers<sp/>or<sp/>validating<sp/>numeric<sp/>input.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@return<sp/>Non-zero<sp/>if<sp/>c<sp/>is<sp/>a<sp/>digit,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>if<sp/>(ft_isdigit(&apos;5&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">@end</highlight><highlight class="normal">code</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/>*<sp/>-<sp/>Use<sp/>ASCII<sp/>value<sp/>range<sp/>48-57<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">-</highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>high-frequency<sp/>calls</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compatibility</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/>*<sp/>-<sp/>No<sp/>need<sp/>to<sp/>handle<sp/>NULL<sp/>as<sp/>input<sp/>is<sp/>a<sp/>single<sp/>character</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline lineno="46" refid="db/d79/libft__docs_8h_1a2cf15b8a1a277d1e2ce3654101a2003d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a2cf15b8a1a277d1e2ce3654101a2003d" kindref="member">ft_isdigit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>character<sp/>is<sp/>alphanumeric<sp/>(A-Z,<sp/>a-z,<sp/>0-9).</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>validating<sp/>identifiers<sp/>or<sp/>user<sp/>input.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@return<sp/>Non-zero<sp/>if<sp/>c<sp/>is<sp/>alphanumeric,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>if<sp/>(ft_isalnum(&apos;a&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">@end</highlight><highlight class="normal">code</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/>*<sp/>-<sp/>Can<sp/>reuse<sp/><ref refid="db/d79/libft__docs_8h_1ac283963beaa3b8c7d09b78851cda297e" kindref="member">ft_isalpha</ref><sp/>and<sp/><ref refid="db/d79/libft__docs_8h_1a2cf15b8a1a277d1e2ce3654101a2003d" kindref="member">ft_isdigit</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>optimization</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/>*<sp/>-<sp/>Handle<sp/>both<sp/>uppercase<sp/>and<sp/>lowercase<sp/>letters</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compatibility</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline lineno="66" refid="db/d79/libft__docs_8h_1a9c2c3821ea43ebdf97de07b123503f8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a9c2c3821ea43ebdf97de07b123503f8b" kindref="member">ft_isalnum</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>character<sp/>is<sp/>an<sp/>ASCII<sp/>character<sp/>(0-127).</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>ensuring<sp/>compatibility<sp/>with<sp/>standard<sp/>C<sp/>functions.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@return<sp/>Non-zero<sp/>if<sp/>c<sp/>is<sp/>ASCII,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>if<sp/>(ft_isascii(65))<sp/>{<sp/>/*<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">@end</highlight><highlight class="normal">code</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/>*<sp/>-<sp/>Check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>value<sp/>is<sp/>between<sp/>0<sp/>and<sp/>127</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/>*<sp/>-<sp/>Handle<sp/>negative<sp/>values<sp/>correctly</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>high-frequency<sp/>calls</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compatibility</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline lineno="86" refid="db/d79/libft__docs_8h_1abf60ddbec6479540e81f3648cf71f1f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1abf60ddbec6479540e81f3648cf71f1f4" kindref="member">ft_isascii</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>character<sp/>is<sp/>printable<sp/>(including<sp/>space).</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>filtering<sp/>or<sp/>displaying<sp/>only<sp/>printable<sp/>characters.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@return<sp/>Non-zero<sp/>if<sp/>c<sp/>is<sp/>printable,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>if<sp/>(ft_isprint(&apos;<sp/>&apos;))<sp/>{<sp/>/*<sp/>true<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">@end</highlight><highlight class="normal">code</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/>*<sp/>-<sp/>Check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>value<sp/>is<sp/>between<sp/>32<sp/>and<sp/>126</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/>*<sp/>-<sp/>Include<sp/>space<sp/>character<sp/>(32)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/>*<sp/>-<sp/>Handle<sp/>negative<sp/>values<sp/>correctly</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>compatibility</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline lineno="106" refid="db/d79/libft__docs_8h_1abcdba69692f21146aeea5b3d59b7d0ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1abcdba69692f21146aeea5b3d59b7d0ca" kindref="member">ft_isprint</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Calculates<sp/>the<sp/>length<sp/>of<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>determining<sp/>the<sp/>size<sp/>of<sp/>a<sp/>string<sp/>for<sp/>memory<sp/>allocation,</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>string<sp/>manipulation,<sp/>or<sp/>validation.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>whose<sp/>length<sp/>is<sp/>to<sp/>be<sp/>calculated.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>number<sp/>of<sp/>characters<sp/>in<sp/>the<sp/>string<sp/>(excluding<sp/>the<sp/>null<sp/>terminator).</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@note<sp/>Passing<sp/>NULL<sp/>is<sp/>undefined<sp/>behavior.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>size_t<sp/>len<sp/>=<sp/>ft_strlen(&quot;Hello&quot;);</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>//<sp/>len<sp/>==<sp/>5</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input<sp/>(undefined<sp/>behavior)</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/>size_t<sp/>for<sp/>large<sp/>strings</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>-<sp/>Don&apos;t<sp/>count<sp/>the<sp/>null<sp/>terminator</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="db/d79/libft__docs_8h_1abbb8c6c4ed85d892e7f1509f65f5768a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1abbb8c6c4ed85d892e7f1509f65f5768a" kindref="member">ft_strlen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Converts<sp/>a<sp/>string<sp/>to<sp/>an<sp/>integer.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>parsing<sp/>numbers<sp/>from<sp/>user<sp/>input<sp/>or<sp/>files.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param<sp/>str<sp/>The<sp/>string<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>integer<sp/>value<sp/>represented<sp/>by<sp/>the<sp/>string.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>int<sp/>n<sp/>=<sp/>ft_atoi(&quot;42&quot;);<sp/>//<sp/>n<sp/>==<sp/>42</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>whitespace<sp/>at<sp/>the<sp/>beginning</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>optional<sp/>sign<sp/>(+<sp/>or<sp/>-)</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>overflow<sp/>cases</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>invalid<sp/>input</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>leading<sp/>zeros</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="db/d79/libft__docs_8h_1afad2ec371b4188602da9a94db687cb16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1afad2ec371b4188602da9a94db687cb16" kindref="member">ft_atoi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Finds<sp/>the<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>character<sp/>in<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>searching<sp/>or<sp/>parsing<sp/>strings.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>search.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>find.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>first<sp/>occurrence<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>char<sp/>*p<sp/>=<sp/>ft_strchr(&quot;Hello&quot;,<sp/>&apos;e&apos;);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;ello&quot;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>the<sp/>null<sp/>terminator<sp/>as<sp/>part<sp/>of<sp/>the<sp/>search</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/>char*<sp/>for<sp/>string<sp/>operations</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="db/d79/libft__docs_8h_1aa6d0c2d180f32ee585485e1a1ce3d55d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1aa6d0c2d180f32ee585485e1a1ce3d55d" kindref="member">ft_strchr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Finds<sp/>the<sp/>last<sp/>occurrence<sp/>of<sp/>a<sp/>character<sp/>in<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>searching<sp/>or<sp/>parsing<sp/>strings<sp/>from<sp/>the<sp/>end.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>search.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>find.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>last<sp/>occurrence<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>char<sp/>*p<sp/>=<sp/>ft_strrchr(&quot;Hello&quot;,<sp/>&apos;l&apos;);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;lo&quot;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>the<sp/>null<sp/>terminator<sp/>as<sp/>part<sp/>of<sp/>the<sp/>search</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/>char*<sp/>for<sp/>string<sp/>operations</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="db/d79/libft__docs_8h_1a49c260cf80f9997975d6f3ec74ead582" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a49c260cf80f9997975d6f3ec74ead582" kindref="member">ft_strrchr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Compares<sp/>two<sp/>strings<sp/>up<sp/>to<sp/>n<sp/>characters.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>sorting<sp/>or<sp/>checking<sp/>string<sp/>equality<sp/>with<sp/>a<sp/>limit.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@param<sp/>s1<sp/>First<sp/>string.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param<sp/>s2<sp/>Second<sp/>string.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>Maximum<sp/>number<sp/>of<sp/>characters<sp/>to<sp/>compare.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>if<sp/>equal,<sp/>&lt;0<sp/>if<sp/>s1<sp/>&lt;<sp/>s2,<sp/>&gt;0<sp/>if<sp/>s1<sp/>&gt;<sp/>s2.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>int<sp/>cmp<sp/>=<sp/>ft_strncmp(&quot;abc&quot;,<sp/>&quot;abd&quot;,<sp/>2);<sp/>//<sp/>cmp<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>n<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>strings<sp/>shorter<sp/>than<sp/>n</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>unsigned<sp/>char<sp/>comparison</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="db/d79/libft__docs_8h_1a9d2fe792187aa4ed08e5864fb2c4d6dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a9d2fe792187aa4ed08e5864fb2c4d6dc" kindref="member">ft_strncmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>to<sp/>a<sp/>specific<sp/>value.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>initializing<sp/>arrays<sp/>or<sp/>buffers.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@param<sp/>b<sp/>Pointer<sp/>to<sp/>the<sp/>memory<sp/>area.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>Value<sp/>to<sp/>set<sp/>(converted<sp/>to<sp/>unsigned<sp/>char).</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param<sp/>len<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>set.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>memory<sp/>area<sp/>b.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[10];</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>ft_memset(buf,<sp/>0,<sp/>10);<sp/>//<sp/>All<sp/>bytes<sp/>set<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>len<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="db/d79/libft__docs_8h_1a19d0a16cec67fe4c1af22f1571f4f8a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a19d0a16cec67fe4c1af22f1571f4f8a6" kindref="member">ft_memset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sets<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>clearing<sp/>buffers<sp/>or<sp/>structures.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>Pointer<sp/>to<sp/>the<sp/>memory<sp/>area.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>set<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[10];</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>ft_bzero(buf,<sp/>10);<sp/>//<sp/>All<sp/>bytes<sp/>set<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>n<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="db/d79/libft__docs_8h_1a5937ab0d08e31d0e3e4a16ec71e293a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a5937ab0d08e31d0e3e4a16ec71e293a1" kindref="member">ft_bzero</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copies<sp/>memory<sp/>from<sp/>source<sp/>to<sp/>destination.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>duplicating<sp/>data<sp/>or<sp/>moving<sp/>blocks<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst<sp/>Destination<sp/>buffer.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@param<sp/>src<sp/>Source<sp/>buffer.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>copy.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>dst.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@note<sp/>Undefined<sp/>behavior<sp/>if<sp/>src<sp/>or<sp/>dst<sp/>is<sp/>NULL<sp/>and<sp/>n<sp/>&gt;<sp/>0.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>char<sp/>src[]<sp/>=<sp/>&quot;abc&quot;;</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>char<sp/>dst[4];</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>ft_memcpy(dst,<sp/>src,<sp/>4);<sp/>//<sp/>Copies<sp/>&quot;abc\0&quot;</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>n<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>overlapping<sp/>memory<sp/>regions<sp/>(use<sp/>memmove<sp/>instead)</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="db/d79/libft__docs_8h_1a5f5c5d19b1f0355d9768c75d30ed5559" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a5f5c5d19b1f0355d9768c75d30ed5559" kindref="member">ft_memcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Moves<sp/>memory<sp/>from<sp/>source<sp/>to<sp/>destination,<sp/>safe<sp/>for<sp/>overlapping<sp/>regions.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>shifting<sp/>data<sp/>within<sp/>the<sp/>same<sp/>buffer.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst<sp/>Destination<sp/>buffer.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@param<sp/>src<sp/>Source<sp/>buffer.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param<sp/>len<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>move.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>dst.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[]<sp/>=<sp/>&quot;abcdef&quot;;</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>ft_memmove(buf<sp/>+<sp/>2,<sp/>buf,<sp/>4);<sp/>//<sp/>buf<sp/>==<sp/>&quot;ababcd&quot;</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>len<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>overlapping<sp/>memory<sp/>regions<sp/>correctly</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>direction<sp/>of<sp/>copy<sp/>for<sp/>overlapping<sp/>regions</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="db/d79/libft__docs_8h_1acdc865fa140c03c01a39d74b1f5c2416" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1acdc865fa140c03c01a39d74b1f5c2416" kindref="member">ft_memmove</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Copies<sp/>a<sp/>string<sp/>with<sp/>size<sp/>limitation.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>safe<sp/>string<sp/>copying<sp/>to<sp/>avoid<sp/>buffer<sp/>overflows.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst<sp/>Destination<sp/>buffer.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param<sp/>src<sp/>Source<sp/>string.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param<sp/>dstsize<sp/>Size<sp/>of<sp/>the<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>@return<sp/>Total<sp/>length<sp/>of<sp/>the<sp/>string<sp/>it<sp/>tried<sp/>to<sp/>create<sp/>(length<sp/>of<sp/>src).</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[5];</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>size_t<sp/>n<sp/>=<sp/>ft_strlcpy(buf,<sp/>&quot;Hello&quot;,<sp/>5);<sp/>//<sp/>buf<sp/>==<sp/>&quot;Hell&quot;,<sp/>n<sp/>==<sp/>5</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>dstsize<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>-<sp/>Always<sp/>null-terminate<sp/>the<sp/>destination</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>the<sp/>length<sp/>of<sp/>src</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>-<sp/>Don&apos;t<sp/>write<sp/>beyond<sp/>dstsize<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="db/d79/libft__docs_8h_1a12f759eb9793cf306fede66d0b7de0fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a12f759eb9793cf306fede66d0b7de0fc" kindref="member">ft_strlcpy</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dstsize);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Concatenates<sp/>strings<sp/>with<sp/>size<sp/>limitation.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>safe<sp/>string<sp/>concatenation<sp/>to<sp/>avoid<sp/>buffer<sp/>overflows.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@param<sp/>dst<sp/>Destination<sp/>buffer<sp/>(must<sp/>be<sp/>null-terminated).</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@param<sp/>src<sp/>Source<sp/>string.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@param<sp/>dstsize<sp/>Total<sp/>size<sp/>of<sp/>the<sp/>destination<sp/>buffer.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@return<sp/>Total<sp/>length<sp/>of<sp/>the<sp/>string<sp/>it<sp/>tried<sp/>to<sp/>create<sp/>(initial<sp/>length<sp/>of<sp/>dst<sp/>+<sp/>length<sp/>of<sp/>src).</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[10]<sp/>=<sp/>&quot;Hi&quot;;</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>size_t<sp/>n<sp/>=<sp/>ft_strlcat(buf,<sp/>&quot;<sp/>there&quot;,<sp/>10);<sp/>//<sp/>buf<sp/>==<sp/>&quot;Hi<sp/>there&quot;,<sp/>n<sp/>==<sp/>8</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>dstsize<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>-<sp/>Always<sp/>null-terminate<sp/>the<sp/>destination</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>the<sp/>length<sp/>of<sp/>src<sp/>+<sp/>initial<sp/>length<sp/>of<sp/>dst</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>-<sp/>Don&apos;t<sp/>write<sp/>beyond<sp/>dstsize<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>case<sp/>where<sp/>dst<sp/>is<sp/>not<sp/>null-terminated</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="db/d79/libft__docs_8h_1a7531453313e0cbfde6fe51662c9c3208" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a7531453313e0cbfde6fe51662c9c3208" kindref="member">ft_strlcat</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dstsize);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Locates<sp/>a<sp/>substring<sp/>in<sp/>a<sp/>string,<sp/>up<sp/>to<sp/>a<sp/>maximum<sp/>length.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>searching<sp/>for<sp/>substrings<sp/>in<sp/>a<sp/>buffer.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@param<sp/>haystack<sp/>The<sp/>string<sp/>to<sp/>search<sp/>in.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>@param<sp/>needle<sp/>The<sp/>substring<sp/>to<sp/>find.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@param<sp/>len<sp/>Maximum<sp/>number<sp/>of<sp/>characters<sp/>to<sp/>search.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>first<sp/>occurrence<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>char<sp/>*p<sp/>=<sp/>ft_strnstr(&quot;Hello<sp/>world&quot;,<sp/>&quot;world&quot;,<sp/>11);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>&quot;world&quot;</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>needle<sp/>string</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>len<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>case<sp/>where<sp/>needle<sp/>is<sp/>longer<sp/>than<sp/>haystack</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>efficient<sp/>string<sp/>matching<sp/>algorithms</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="db/d79/libft__docs_8h_1ae00229613cc0bf361e86dca72ad92591" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1ae00229613cc0bf361e86dca72ad92591" kindref="member">ft_strnstr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*haystack,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*needle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Searches<sp/>for<sp/>a<sp/>byte<sp/>in<sp/>a<sp/>block<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>binary<sp/>data<sp/>processing.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>Memory<sp/>area<sp/>to<sp/>search.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>Byte<sp/>to<sp/>find.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>search.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>first<sp/>occurrence<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>char<sp/>buf[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>void<sp/>*p<sp/>=<sp/>ft_memchr(buf,<sp/>3,<sp/>4);<sp/>//<sp/>p<sp/>points<sp/>to<sp/>buf[2]</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>n<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>unsigned<sp/>char<sp/>comparison</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="db/d79/libft__docs_8h_1abf633e8e48a8afbe61947f61de5ac695" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1abf633e8e48a8afbe61947f61de5ac695" kindref="member">ft_memchr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Compares<sp/>two<sp/>blocks<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>checking<sp/>equality<sp/>of<sp/>binary<sp/>data.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>@param<sp/>s1<sp/>First<sp/>memory<sp/>area.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@param<sp/>s2<sp/>Second<sp/>memory<sp/>area.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>compare.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>if<sp/>equal,<sp/>&lt;0<sp/>if<sp/>s1<sp/>&lt;<sp/>s2,<sp/>&gt;0<sp/>if<sp/>s1<sp/>&gt;<sp/>s2.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>int<sp/>cmp<sp/>=<sp/>ft_memcmp(&quot;abc&quot;,<sp/>&quot;abd&quot;,<sp/>2);<sp/>//<sp/>cmp<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>n<sp/>=<sp/>0<sp/>case</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>large<sp/>blocks</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>alignment<sp/>issues</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>using<sp/>word-sized<sp/>operations<sp/>for<sp/>speed</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>unsigned<sp/>char<sp/>comparison</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="db/d79/libft__docs_8h_1a08f665a1828c402f2ffe2e2187f135fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a08f665a1828c402f2ffe2e2187f135fc" kindref="member">ft_memcmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Allocates<sp/>memory<sp/>for<sp/>an<sp/>array<sp/>and<sp/>initializes<sp/>it<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>creating<sp/>arrays<sp/>or<sp/>buffers<sp/>with<sp/>all<sp/>elements<sp/>set<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>@param<sp/>count<sp/>Number<sp/>of<sp/>elements.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param<sp/>size<sp/>Size<sp/>of<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>allocated<sp/>memory,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>int<sp/>*arr<sp/>=<sp/>(int<sp/>*)ft_calloc(10,<sp/>sizeof(int));</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>//<sp/>arr[0..9]<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>count<sp/>=<sp/>0<sp/>or<sp/>size<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>overflow<sp/>in<sp/>count<sp/>*<sp/>size</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>-<sp/>Initialize<sp/>all<sp/>bytes<sp/>to<sp/>zero</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>alignment<sp/>requirements</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>large<sp/>allocations</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="db/d79/libft__docs_8h_1ae0a6807f9f78ed4bf4f958323582d22f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1ae0a6807f9f78ed4bf4f958323582d22f" kindref="member">ft_calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Duplicates<sp/>a<sp/>string<sp/>by<sp/>allocating<sp/>new<sp/>memory.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>making<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>string<sp/>that<sp/>can<sp/>be<sp/>modified<sp/>or<sp/>freed<sp/>independently.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param<sp/>s1<sp/>The<sp/>string<sp/>to<sp/>duplicate.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>string,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>char<sp/>*copy<sp/>=<sp/>ft_strdup(&quot;Hello&quot;);</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>//<sp/>copy<sp/>==<sp/>&quot;Hello&quot;</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>enough<sp/>memory<sp/>for<sp/>string<sp/>+<sp/>null<sp/>terminator</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="db/d79/libft__docs_8h_1a2ac2079a4250507c9af75d696f2ae476" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a2ac2079a4250507c9af75d696f2ae476" kindref="member">ft_strdup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="507"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>a<sp/>substring<sp/>from<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>parsing<sp/>or<sp/>manipulating<sp/>parts<sp/>of<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>source<sp/>string.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>@param<sp/>start<sp/>Starting<sp/>index.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@param<sp/>len<sp/>Maximum<sp/>length<sp/>of<sp/>the<sp/>substring.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>substring,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>char<sp/>*sub<sp/>=<sp/>ft_substr(&quot;Hello&quot;,<sp/>1,<sp/>3);<sp/>//<sp/>sub<sp/>==<sp/>&quot;ell&quot;</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>start<sp/>beyond<sp/>string<sp/>length</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>len<sp/>beyond<sp/>string<sp/>length</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>only<sp/>necessary<sp/>memory</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="db/d79/libft__docs_8h_1a78c402cbf3d55b1374693c3b7d34f71d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a78c402cbf3d55b1374693c3b7d34f71d" kindref="member">ft_substr</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Joins<sp/>two<sp/>strings<sp/>into<sp/>a<sp/>new<sp/>string.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>concatenating<sp/>strings<sp/>with<sp/>dynamic<sp/>memory<sp/>allocation.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@param<sp/>s1<sp/>First<sp/>string.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>@param<sp/>s2<sp/>Second<sp/>string.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>string,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>char<sp/>*joined<sp/>=<sp/>ft_strjoin(&quot;Hello&quot;,<sp/>&quot;<sp/>world&quot;);<sp/>//<sp/>joined<sp/>==<sp/>&quot;Hello<sp/>world&quot;</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>enough<sp/>memory<sp/>for<sp/>both<sp/>strings<sp/>+<sp/>null<sp/>terminator</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>overflow</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557" refid="db/d79/libft__docs_8h_1a91e6e3e428bcc9f2291b700e1829b82b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a91e6e3e428bcc9f2291b700e1829b82b" kindref="member">ft_strjoin</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s2);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Trims<sp/>characters<sp/>from<sp/>the<sp/>beginning<sp/>and<sp/>end<sp/>of<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>removing<sp/>unwanted<sp/>characters<sp/>(like<sp/>whitespace)<sp/>from<sp/>input.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/>@param<sp/>s1<sp/>The<sp/>string<sp/>to<sp/>trim.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@param<sp/>set<sp/>The<sp/>set<sp/>of<sp/>characters<sp/>to<sp/>remove.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>trimmed<sp/>string,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>char<sp/>*trimmed<sp/>=<sp/>ft_strtrim(&quot;<sp/><sp/>Hello<sp/><sp/>&quot;,<sp/>&quot;<sp/>&quot;);<sp/>//<sp/>trimmed<sp/>==<sp/>&quot;Hello&quot;</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>set</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>only<sp/>necessary<sp/>memory</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>strings<sp/>with<sp/>only<sp/>trim<sp/>characters</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="db/d79/libft__docs_8h_1a60352c5b39fab08469b3e28131a79e25" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a60352c5b39fab08469b3e28131a79e25" kindref="member">ft_strtrim</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*set);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="585"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Splits<sp/>a<sp/>string<sp/>into<sp/>an<sp/>array<sp/>of<sp/>strings<sp/>using<sp/>a<sp/>delimiter.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>parsing<sp/>CSV,<sp/>command-line<sp/>arguments,<sp/>or<sp/>any<sp/>delimited<sp/>data.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>split.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>delimiter<sp/>character.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>@return<sp/>Array<sp/>of<sp/>strings,<sp/>terminated<sp/>by<sp/>NULL.<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>char<sp/>**words<sp/>=<sp/>ft_split(&quot;a,b,c&quot;,<sp/>&apos;,&apos;);</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>//<sp/>words[0]<sp/>==<sp/>&quot;a&quot;,<sp/>words[1]<sp/>==<sp/>&quot;b&quot;,<sp/>words[2]<sp/>==<sp/>&quot;c&quot;,<sp/>words[3]<sp/>==<sp/>NULL</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>strings<sp/>with<sp/>no<sp/>delimiters</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>consecutive<sp/>delimiters</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>delimiter<sp/>at<sp/>start/end</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>memory<sp/>for<sp/>array<sp/>and<sp/>each<sp/>string</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>overflow</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>-<sp/>Free<sp/>all<sp/>allocated<sp/>memory<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="db/d79/libft__docs_8h_1aa65c9de65051c8c589286cf133c4a1f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="db/d79/libft__docs_8h_1aa65c9de65051c8c589286cf133c4a1f4" kindref="member">ft_split</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Converts<sp/>an<sp/>integer<sp/>to<sp/>a<sp/>string.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>displaying<sp/>numbers<sp/>or<sp/>writing<sp/>them<sp/>to<sp/>files.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>The<sp/>integer<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>string,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>char<sp/>*s<sp/>=<sp/>ft_itoa(42);<sp/>//<sp/>s<sp/>==<sp/>&quot;42&quot;</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>negative<sp/>numbers</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>zero</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>INT_MIN</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>enough<sp/>memory<sp/>for<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>overflow</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="db/d79/libft__docs_8h_1a8a6ea3765dfd826eabfc00d36e28ea38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a8a6ea3765dfd826eabfc00d36e28ea38" kindref="member">ft_itoa</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="640"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Applies<sp/>a<sp/>function<sp/>to<sp/>each<sp/>character<sp/>of<sp/>a<sp/>string,<sp/>creating<sp/>a<sp/>new<sp/>string.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>mapping<sp/>or<sp/>transforming<sp/>strings.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>source<sp/>string.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>@param<sp/>f<sp/>The<sp/>function<sp/>to<sp/>apply<sp/>(takes<sp/>index<sp/>and<sp/>character).</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>new<sp/>string,<sp/>or<sp/>NULL<sp/>on<sp/>failure.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>char<sp/>to_upper(unsigned<sp/>int<sp/>i,<sp/>char<sp/>c)<sp/>{<sp/>(void)i;<sp/>return<sp/>ft_toupper(c);<sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>char<sp/>*upper<sp/>=<sp/>ft_strmapi(&quot;abc&quot;,<sp/>to_upper);<sp/>//<sp/>upper<sp/>==<sp/>&quot;ABC&quot;</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>-<sp/>Allocate<sp/>enough<sp/>memory<sp/>for<sp/>the<sp/>string</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>NULL<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*<sp/>-<sp/>Check<sp/>for<sp/>memory<sp/>leaks<sp/>in<sp/>error<sp/>cases</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>function<sp/>pointer<sp/>NULL</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="db/d79/libft__docs_8h_1a668b60557bfc9d60c2d3ccda8afadf49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="db/d79/libft__docs_8h_1a668b60557bfc9d60c2d3ccda8afadf49" kindref="member">ft_strmapi</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>(*<ref refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" kindref="member">f</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="666"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Applies<sp/>a<sp/>function<sp/>to<sp/>each<sp/>character<sp/>of<sp/>a<sp/>string<sp/>in<sp/>place.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>modifying<sp/>strings<sp/>directly.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>modify.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>@param<sp/>f<sp/>The<sp/>function<sp/>to<sp/>apply<sp/>(takes<sp/>index<sp/>and<sp/>pointer<sp/>to<sp/>character).</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*<sp/>void<sp/>to_upper(unsigned<sp/>int<sp/>i,<sp/>char<sp/>*c)<sp/>{<sp/>(void)i;<sp/>*c<sp/>=<sp/>ft_toupper(*c);<sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>char<sp/>str[]<sp/>=<sp/>&quot;abc&quot;;</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>ft_striteri(str,<sp/>to_upper);<sp/>//<sp/>str<sp/>==<sp/>&quot;ABC&quot;</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>inputs</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>empty<sp/>strings</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>-<sp/>Be<sp/>careful<sp/>with<sp/>pointer<sp/>arithmetic</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>function<sp/>pointer<sp/>NULL</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>overflow</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="db/d79/libft__docs_8h_1ada722cffd2c6c8169ae339afd0f9763c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1ada722cffd2c6c8169ae339afd0f9763c" kindref="member">ft_striteri</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" kindref="member">f</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="690"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Writes<sp/>a<sp/>character<sp/>to<sp/>a<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>outputting<sp/>characters<sp/>to<sp/>files<sp/>or<sp/>standard<sp/>output.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>@param<sp/>fd<sp/>The<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>ft_putchar_fd(&apos;A&apos;,<sp/>1);<sp/>//<sp/>Writes<sp/>&apos;A&apos;<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>invalid<sp/>file<sp/>descriptor</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>write<sp/>errors</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>multiple<sp/>writes</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>system<sp/>call<sp/>errors</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>character<sp/>encoding</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="db/d79/libft__docs_8h_1a8ee15a511946c1397bd2bdea4aed6aee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a8ee15a511946c1397bd2bdea4aed6aee" kindref="member">ft_putchar_fd</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Writes<sp/>a<sp/>string<sp/>to<sp/>a<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>outputting<sp/>strings<sp/>to<sp/>files<sp/>or<sp/>standard<sp/>output.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>@param<sp/>fd<sp/>The<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/>ft_putstr_fd(&quot;Hello&quot;,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;Hello&quot;<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>invalid<sp/>file<sp/>descriptor</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>write<sp/>errors</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>system<sp/>call<sp/>errors</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>encoding</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731" refid="db/d79/libft__docs_8h_1acefce9ac519f8f8b7d3fde33dbafe469" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1acefce9ac519f8f8b7d3fde33dbafe469" kindref="member">ft_putstr_fd</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Writes<sp/>a<sp/>string<sp/>followed<sp/>by<sp/>a<sp/>newline<sp/>to<sp/>a<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>outputting<sp/>lines<sp/>to<sp/>files<sp/>or<sp/>standard<sp/>output.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@param<sp/>s<sp/>The<sp/>string<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>@param<sp/>fd<sp/>The<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>ft_putendl_fd(&quot;Hello&quot;,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;Hello\n&quot;<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>NULL<sp/>input</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>invalid<sp/>file<sp/>descriptor</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>write<sp/>errors</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>long<sp/>strings</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>system<sp/>call<sp/>errors</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>string<sp/>encoding</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>newline<sp/>encoding</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="db/d79/libft__docs_8h_1aeb112152acfc553d58d61a5df38afcde" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1aeb112152acfc553d58d61a5df38afcde" kindref="member">ft_putendl_fd</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="756"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Writes<sp/>an<sp/>integer<sp/>as<sp/>a<sp/>string<sp/>to<sp/>a<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>outputting<sp/>numbers<sp/>to<sp/>files<sp/>or<sp/>standard<sp/>output.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/>@param<sp/>n<sp/>The<sp/>integer<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@param<sp/>fd<sp/>The<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>ft_putnbr_fd(42,<sp/>1);<sp/>//<sp/>Writes<sp/>&quot;42&quot;<sp/>to<sp/>stdout</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>negative<sp/>numbers</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>INT_MIN</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>invalid<sp/>file<sp/>descriptor</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>write<sp/>errors</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>system<sp/>call<sp/>errors</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>number<sp/>encoding</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="db/d79/libft__docs_8h_1a63cc0aec12256d125d3f85e472280972" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a63cc0aec12256d125d3f85e472280972" kindref="member">ft_putnbr_fd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Converts<sp/>a<sp/>character<sp/>to<sp/>uppercase.</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>case-insensitive<sp/>comparisons<sp/>or<sp/>formatting.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>uppercase<sp/>equivalent<sp/>if<sp/>c<sp/>is<sp/>lowercase,<sp/>otherwise<sp/>c.</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/>char<sp/>up<sp/>=<sp/>ft_toupper(&apos;a&apos;);<sp/>//<sp/>up<sp/>==<sp/>&apos;A&apos;</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>non-alphabetic<sp/>characters</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>high-frequency<sp/>calls</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>character<sp/>encoding</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/>int<sp/>for<sp/>compatibility</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="db/d79/libft__docs_8h_1aef116be7b5bceafff4b59f20a4433d12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1aef116be7b5bceafff4b59f20a4433d12" kindref="member">ft_toupper</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Converts<sp/>a<sp/>character<sp/>to<sp/>lowercase.</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>Useful<sp/>for<sp/>case-insensitive<sp/>comparisons<sp/>or<sp/>formatting.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@param<sp/>c<sp/>The<sp/>character<sp/>to<sp/>convert.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>lowercase<sp/>equivalent<sp/>if<sp/>c<sp/>is<sp/>uppercase,<sp/>otherwise<sp/>c.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>char<sp/>low<sp/>=<sp/>ft_tolower(&apos;A&apos;);<sp/>//<sp/>low<sp/>==<sp/>&apos;a&apos;</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/>@note<sp/>Implementation<sp/>Considerations:</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>non-alphabetic<sp/>characters</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>-<sp/>Consider<sp/>performance<sp/>for<sp/>high-frequency<sp/>calls</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>-<sp/>Handle<sp/>character<sp/>encoding</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>-<sp/>Return<sp/>type<sp/>should<sp/>be<sp/>int<sp/>for<sp/>compatibility</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="db/d79/libft__docs_8h_1ab86e5297914753b6c82d7e3c3020ce17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1ab86e5297914753b6c82d7e3c3020ce17" kindref="member">ft_tolower</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="819"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>new<sp/>list<sp/>element.</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>@param<sp/>content<sp/>The<sp/>content<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>the<sp/>new<sp/>element.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>@return<sp/>t_list*<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>new<sp/>element,<sp/>or<sp/>NULL<sp/>if<sp/>allocation<sp/>fails.</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>if<sp/>(new_node)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>new_node</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>free(new_node-&gt;content);</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>free(new_node);</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*<sp/>@note<sp/>Memory<sp/>for<sp/>both<sp/>the<sp/>element<sp/>and<sp/>its<sp/>content<sp/>is<sp/>allocated.</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="db/d79/libft__docs_8h_1a8fe4ea6f56f5a2a75ee13d97416b60ed" refkind="member"><highlight class="normal">t_list<sp/>*<ref refid="db/d79/libft__docs_8h_1a8fe4ea6f56f5a2a75ee13d97416b60ed" kindref="member">ft_lstnew</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*content);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="838"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Adds<sp/>a<sp/>new<sp/>element<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>@param<sp/>new<sp/>The<sp/>new<sp/>element<sp/>to<sp/>add.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>ft_lstadd_front(&amp;list,<sp/>new_node);</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>new<sp/>element<sp/>becomes<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="db/d79/libft__docs_8h_1a0195e4eb88fad15717ed90524ac15771" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a0195e4eb88fad15717ed90524ac15771" kindref="member">ft_lstadd_front</ref>(t_list<sp/>**lst,<sp/>t_list<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="854"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Counts<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>a<sp/>list.</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>The<sp/>beginning<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/>@return<sp/>int<sp/>The<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>int<sp/>size<sp/>=<sp/>ft_lstsize(list);</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*<sp/>@note<sp/>Returns<sp/>0<sp/>if<sp/>the<sp/>list<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="db/d79/libft__docs_8h_1a9da614988ac99446db9df99d2c773fc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a9da614988ac99446db9df99d2c773fc1" kindref="member">ft_lstsize</ref>(t_list<sp/>*lst);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Returns<sp/>the<sp/>last<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>The<sp/>beginning<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>@return<sp/>t_list*<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>element,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>list<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*last<sp/>=<sp/>ft_lstlast(list);</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*<sp/>@note<sp/>Returns<sp/>NULL<sp/>if<sp/>the<sp/>list<sp/>is<sp/>empty.</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884" refid="db/d79/libft__docs_8h_1aed5f9b5ecc45235a7b7cf9d4b24e43dc" refkind="member"><highlight class="normal">t_list<sp/>*<ref refid="db/d79/libft__docs_8h_1aed5f9b5ecc45235a7b7cf9d4b24e43dc" kindref="member">ft_lstlast</ref>(t_list<sp/>*lst);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="886"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Adds<sp/>a<sp/>new<sp/>element<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>@param<sp/>new<sp/>The<sp/>new<sp/>element<sp/>to<sp/>add.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*new_node<sp/>=<sp/>ft_lstnew(&quot;Hello&quot;);</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*<sp/>ft_lstadd_back(&amp;list,<sp/>new_node);</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>new<sp/>element<sp/>becomes<sp/>the<sp/>last<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="db/d79/libft__docs_8h_1a4c10e88fffc3c9467eb16e6debd227a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a4c10e88fffc3c9467eb16e6debd227a4" kindref="member">ft_lstadd_back</ref>(t_list<sp/>**lst,<sp/>t_list<sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Deletes<sp/>a<sp/>single<sp/>element<sp/>from<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>The<sp/>element<sp/>to<sp/>delete.</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*<sp/>@param<sp/>del<sp/>A<sp/>function<sp/>to<sp/>free<sp/>the<sp/>content<sp/>of<sp/>the<sp/>element.</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>ft_lstdelone(list,<sp/>free);</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>content<sp/>of<sp/>the<sp/>element<sp/>is<sp/>freed<sp/>using<sp/>the<sp/>del<sp/>function.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916" refid="db/d79/libft__docs_8h_1ac2b881501f9ee2f3ed5718f6d9ebee7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1ac2b881501f9ee2f3ed5718f6d9ebee7c" kindref="member">ft_lstdelone</ref>(t_list<sp/>*lst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*del)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="918"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Deletes<sp/>and<sp/>frees<sp/>the<sp/>entire<sp/>list.</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>element<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>@param<sp/>del<sp/>A<sp/>function<sp/>to<sp/>free<sp/>the<sp/>content<sp/>of<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*<sp/>ft_lstclear(&amp;list,<sp/>free);</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>content<sp/>of<sp/>each<sp/>element<sp/>is<sp/>freed<sp/>using<sp/>the<sp/>del<sp/>function.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932" refid="db/d79/libft__docs_8h_1a6e900cfaea2857bbf490f3105e38da93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a6e900cfaea2857bbf490f3105e38da93" kindref="member">ft_lstclear</ref>(t_list<sp/>**lst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*del)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Iterates<sp/>through<sp/>the<sp/>list<sp/>and<sp/>applies<sp/>a<sp/>function<sp/>to<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>The<sp/>beginning<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*<sp/>@param<sp/>f<sp/>A<sp/>function<sp/>to<sp/>apply<sp/>to<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>ft_lstiter(list,<sp/>print_content);</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>function<sp/>f<sp/>is<sp/>applied<sp/>to<sp/>the<sp/>content<sp/>of<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948" refid="db/d79/libft__docs_8h_1a1888c62a89ec3d206f2ed4590f4a021d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d79/libft__docs_8h_1a1888c62a89ec3d206f2ed4590f4a021d" kindref="member">ft_lstiter</ref>(t_list<sp/>*lst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" kindref="member">f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="950"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>new<sp/>list<sp/>resulting<sp/>from<sp/>applying<sp/>a<sp/>function<sp/>to<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*<sp/>@param<sp/>lst<sp/>The<sp/>beginning<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*<sp/>@param<sp/>f<sp/>A<sp/>function<sp/>to<sp/>apply<sp/>to<sp/>each<sp/>element.</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/>*<sp/>@param<sp/>del<sp/>A<sp/>function<sp/>to<sp/>free<sp/>the<sp/>content<sp/>of<sp/>an<sp/>element<sp/>if<sp/>allocation<sp/>fails.</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*<sp/>@return<sp/>t_list*<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>new<sp/>list,<sp/>or<sp/>NULL<sp/>if<sp/>allocation<sp/>fails.</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*<sp/>//<sp/>Add<sp/>elements<sp/>to<sp/>list</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*<sp/>t_list<sp/>*new_list<sp/>=<sp/>ft_lstmap(list,<sp/>duplicate_content,<sp/>free);</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>content<sp/>of<sp/>each<sp/>element<sp/>is<sp/>duplicated<sp/>using<sp/>the<sp/>function<sp/>f.</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="db/d79/libft__docs_8h_1a8198d1837ffbba05823f5e85afebf9c6" refkind="member"><highlight class="normal">t_list<sp/>*<ref refid="db/d79/libft__docs_8h_1a8198d1837ffbba05823f5e85afebf9c6" kindref="member">ft_lstmap</ref>(t_list<sp/>*lst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*<ref refid="d5/ddd/unity_8c_1af900396d7b72ff2a7002e8befe8cf8f1" kindref="member">f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*del)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight></codeline>
    </programlisting>
    <location file="libft_docs.h"/>
  </compounddef>
</doxygen>
